//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Hello.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ProjAntlr4Test.antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HelloLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, FM=3, PREDICTION=4, P1=5, P2=6, TRUE=7, FALSE=8, WS=9, 
		STRING=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "FM", "PREDICTION", "P1", "P2", "TRUE", "FALSE", "A__", 
		"B__", "C__", "D__", "E__", "F__", "G__", "H__", "I__", "J__", "K__", 
		"L__", "M__", "N__", "O__", "P__", "Q__", "R__", "S__", "T__", "U__", 
		"V__", "W__", "X__", "Y__", "Z__", "N1__", "N2__", "WS", "STRING"
	};


	public HelloLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HelloLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "FM", "PREDICTION", "P1", "P2", "TRUE", "FALSE", "WS", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hello.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HelloLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,184,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
		1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
		1,34,1,34,1,35,1,35,1,36,4,36,170,8,36,11,36,12,36,171,1,36,1,36,1,37,
		1,37,5,37,178,8,37,10,37,12,37,181,9,37,1,37,1,37,1,179,0,38,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,
		35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,
		63,0,65,0,67,0,69,0,71,0,73,9,75,10,1,0,29,2,0,65,65,97,97,2,0,66,66,98,
		98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,
		2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,
		2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,
		2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,
		2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,
		2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,
		1,0,49,49,1,0,50,50,3,0,9,10,13,13,32,32,157,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,7,84,
		1,0,0,0,9,95,1,0,0,0,11,98,1,0,0,0,13,101,1,0,0,0,15,106,1,0,0,0,17,112,
		1,0,0,0,19,114,1,0,0,0,21,116,1,0,0,0,23,118,1,0,0,0,25,120,1,0,0,0,27,
		122,1,0,0,0,29,124,1,0,0,0,31,126,1,0,0,0,33,128,1,0,0,0,35,130,1,0,0,
		0,37,132,1,0,0,0,39,134,1,0,0,0,41,136,1,0,0,0,43,138,1,0,0,0,45,140,1,
		0,0,0,47,142,1,0,0,0,49,144,1,0,0,0,51,146,1,0,0,0,53,148,1,0,0,0,55,150,
		1,0,0,0,57,152,1,0,0,0,59,154,1,0,0,0,61,156,1,0,0,0,63,158,1,0,0,0,65,
		160,1,0,0,0,67,162,1,0,0,0,69,164,1,0,0,0,71,166,1,0,0,0,73,169,1,0,0,
		0,75,175,1,0,0,0,77,78,5,123,0,0,78,2,1,0,0,0,79,80,5,125,0,0,80,4,1,0,
		0,0,81,82,3,27,13,0,82,83,3,41,20,0,83,6,1,0,0,0,84,85,3,47,23,0,85,86,
		3,51,25,0,86,87,3,25,12,0,87,88,3,23,11,0,88,89,3,33,16,0,89,90,3,21,10,
		0,90,91,3,55,27,0,91,92,3,33,16,0,92,93,3,45,22,0,93,94,3,43,21,0,94,8,
		1,0,0,0,95,96,3,47,23,0,96,97,3,69,34,0,97,10,1,0,0,0,98,99,3,47,23,0,
		99,100,3,71,35,0,100,12,1,0,0,0,101,102,3,55,27,0,102,103,3,51,25,0,103,
		104,3,57,28,0,104,105,3,25,12,0,105,14,1,0,0,0,106,107,3,27,13,0,107,108,
		3,17,8,0,108,109,3,39,19,0,109,110,3,53,26,0,110,111,3,25,12,0,111,16,
		1,0,0,0,112,113,7,0,0,0,113,18,1,0,0,0,114,115,7,1,0,0,115,20,1,0,0,0,
		116,117,7,2,0,0,117,22,1,0,0,0,118,119,7,3,0,0,119,24,1,0,0,0,120,121,
		7,4,0,0,121,26,1,0,0,0,122,123,7,5,0,0,123,28,1,0,0,0,124,125,7,6,0,0,
		125,30,1,0,0,0,126,127,7,7,0,0,127,32,1,0,0,0,128,129,7,8,0,0,129,34,1,
		0,0,0,130,131,7,9,0,0,131,36,1,0,0,0,132,133,7,10,0,0,133,38,1,0,0,0,134,
		135,7,11,0,0,135,40,1,0,0,0,136,137,7,12,0,0,137,42,1,0,0,0,138,139,7,
		13,0,0,139,44,1,0,0,0,140,141,7,14,0,0,141,46,1,0,0,0,142,143,7,15,0,0,
		143,48,1,0,0,0,144,145,7,16,0,0,145,50,1,0,0,0,146,147,7,17,0,0,147,52,
		1,0,0,0,148,149,7,18,0,0,149,54,1,0,0,0,150,151,7,19,0,0,151,56,1,0,0,
		0,152,153,7,20,0,0,153,58,1,0,0,0,154,155,7,21,0,0,155,60,1,0,0,0,156,
		157,7,22,0,0,157,62,1,0,0,0,158,159,7,23,0,0,159,64,1,0,0,0,160,161,7,
		24,0,0,161,66,1,0,0,0,162,163,7,25,0,0,163,68,1,0,0,0,164,165,7,26,0,0,
		165,70,1,0,0,0,166,167,7,27,0,0,167,72,1,0,0,0,168,170,7,28,0,0,169,168,
		1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,
		0,173,174,6,36,0,0,174,74,1,0,0,0,175,179,5,39,0,0,176,178,9,0,0,0,177,
		176,1,0,0,0,178,181,1,0,0,0,179,180,1,0,0,0,179,177,1,0,0,0,180,182,1,
		0,0,0,181,179,1,0,0,0,182,183,5,39,0,0,183,76,1,0,0,0,3,0,171,179,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ProjAntlr4Test.antlr
