//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Hello.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ProjAntlr4Test.antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HelloParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, FM=3, PREDICTION=4, P1=5, P2=6, TRUE=7, FALSE=8, WS=9, 
		STRING=10;
	public const int
		RULE_start_rule = 0, RULE_sub_ents = 1, RULE_fm_section = 2, RULE_fm_block = 3, 
		RULE_boolean = 4;
	public static readonly string[] ruleNames = {
		"start_rule", "sub_ents", "fm_section", "fm_block", "boolean"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "FM", "PREDICTION", "P1", "P2", "TRUE", "FALSE", "WS", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hello.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HelloParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HelloParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HelloParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Start_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HelloParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_entsContext[] sub_ents() {
			return GetRuleContexts<Sub_entsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_entsContext sub_ents(int i) {
			return GetRuleContext<Sub_entsContext>(i);
		}
		public Start_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.EnterStart_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.ExitStart_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHelloVisitor<TResult> typedVisitor = visitor as IHelloVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_ruleContext start_rule() {
		Start_ruleContext _localctx = new Start_ruleContext(Context, State);
		EnterRule(_localctx, 0, RULE_start_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FM) {
				{
				{
				State = 10;
				sub_ents();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_entsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fm_sectionContext fm_section() {
			return GetRuleContext<Fm_sectionContext>(0);
		}
		public Sub_entsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_ents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.EnterSub_ents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.ExitSub_ents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHelloVisitor<TResult> typedVisitor = visitor as IHelloVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_ents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_entsContext sub_ents() {
		Sub_entsContext _localctx = new Sub_entsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sub_ents);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			fm_section();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fm_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FM() { return GetToken(HelloParser.FM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fm_blockContext[] fm_block() {
			return GetRuleContexts<Fm_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fm_blockContext fm_block(int i) {
			return GetRuleContext<Fm_blockContext>(i);
		}
		public Fm_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fm_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.EnterFm_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.ExitFm_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHelloVisitor<TResult> typedVisitor = visitor as IHelloVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFm_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fm_sectionContext fm_section() {
		Fm_sectionContext _localctx = new Fm_sectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_fm_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(FM);
			State = 21;
			Match(T__0);
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120L) != 0)) {
				{
				{
				State = 22;
				fm_block();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fm_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FM() { return GetToken(HelloParser.FM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HelloParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P1() { return GetToken(HelloParser.P1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P2() { return GetToken(HelloParser.P2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDICTION() { return GetToken(HelloParser.PREDICTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Fm_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fm_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.EnterFm_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.ExitFm_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHelloVisitor<TResult> typedVisitor = visitor as IHelloVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFm_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fm_blockContext fm_block() {
		Fm_blockContext _localctx = new Fm_blockContext(Context, State);
		EnterRule(_localctx, 6, RULE_fm_block);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				Match(FM);
				State = 31;
				Match(STRING);
				}
				break;
			case P1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				Match(P1);
				State = 33;
				Match(STRING);
				}
				break;
			case P2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				Match(P2);
				State = 35;
				Match(STRING);
				}
				break;
			case PREDICTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36;
				Match(PREDICTION);
				State = 37;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(HelloParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(HelloParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHelloVisitor<TResult> typedVisitor = visitor as IHelloVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 8, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,43,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,5,0,12,8,0,10,0,
		12,0,15,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,5,2,24,8,2,10,2,12,2,27,9,2,1,
		2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,39,8,3,1,4,1,4,1,4,0,0,5,0,2,
		4,6,8,0,1,1,0,7,8,42,0,13,1,0,0,0,2,18,1,0,0,0,4,20,1,0,0,0,6,38,1,0,0,
		0,8,40,1,0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,15,1,0,0,0,13,11,1,0,0,0,
		13,14,1,0,0,0,14,16,1,0,0,0,15,13,1,0,0,0,16,17,5,0,0,1,17,1,1,0,0,0,18,
		19,3,4,2,0,19,3,1,0,0,0,20,21,5,3,0,0,21,25,5,1,0,0,22,24,3,6,3,0,23,22,
		1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,28,1,0,0,0,27,25,
		1,0,0,0,28,29,5,2,0,0,29,5,1,0,0,0,30,31,5,3,0,0,31,39,5,10,0,0,32,33,
		5,5,0,0,33,39,5,10,0,0,34,35,5,6,0,0,35,39,5,10,0,0,36,37,5,4,0,0,37,39,
		3,8,4,0,38,30,1,0,0,0,38,32,1,0,0,0,38,34,1,0,0,0,38,36,1,0,0,0,39,7,1,
		0,0,0,40,41,7,0,0,0,41,9,1,0,0,0,3,13,25,38
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ProjAntlr4Test.antlr
